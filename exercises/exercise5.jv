pipeline GtfsPipeline {

    GTFSSampleFeedExtractor
        -> StopsFilePicker 
        -> StopsTextFileInterpreter
        -> StopsCSVInterpreter 
        -> StopsTableInterpreter 
        -> StopsLoader;


    // 3. As a first step, we download the zip file and interpret it.
    block GTFSSampleFeedExtractor oftype GTFSExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip
";
    }

    block StopsFilePicker oftype FilePicker {
        path: "/stops.txt";
    }

 
    // 5. The rest of the pipeline follows the usual pattern.

    block StopsTextFileInterpreter oftype TextFileInterpreter { 
        encoding: "utf8";

    }
   
    block StopsCSVInterpreter oftype CSVInterpreter { 
        delimiter: ",";
         enclosing: '"';
    }




    block StopsTableInterpreter oftype TableInterpreter {
        header: true;
        columns:[
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype rangecontraints,
    
            "stop_lon" oftype decimal,
            "zone_id" oftype IDZONE,
        ];
    }


    block StopsLoader oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }


}


constraint ZONE on integer : value == 1645 ;

valuetype IDZONE oftype integer {
    constraints :[ZONE];
}


valuetype rangecontraints oftype decimal {
    // 10. Valuetypes can be further refined by providing constraints.
    constraints: [
        Rangelower,
        RangeUpper,
   
    ];
}

constraint Rangelower on decimal : value > -90.0 ;
constraint RangeUpper on decimal : value < 90.0 ;


//   constraint invalidRows oftype DenylistConstraint {
//    denylist: ["Nan", " ", "Null"];
//  }